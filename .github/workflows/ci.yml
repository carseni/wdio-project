name: CI - Realworld Stack (Backend + UI + WDIO)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: realworld
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      # üß© WDIO project (current repo)
      - name: Checkout WDIO project
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # ‚öôÔ∏è Clone and prepare backend
      - name: Clone Backend
        run: |
          git clone https://github.com/carseni/realworld-backend.git realworld-backend
          cd realworld-backend
          npm ci
          npx prisma generate
          npx prisma migrate deploy
          npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/realworld

      - name: Start Backend
        run: |
          cd realworld-backend
          npm start &
          echo "Waiting for API to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3001/api/tags > /dev/null; then
              echo "‚úÖ API is up!"
              break
            fi
            echo "‚è≥ Waiting ($i/30)..."
            sleep 3
          done
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/realworld

      # üé® Clone and build frontend
      - name: Clone Frontend
        run: |
          git clone https://github.com/carseni/realworld-ui.git realworld-ui
          cd realworld-ui
          npm ci
          npm run build

      # üß™ Run WDIO tests
      - name: Run WDIO Tests (spec + BDD)
        run: |
          cd wdio-project-main || cd .
          npm ci
          npm run test:all
        env:
          CI: true
          API_URL: http://localhost:3001/api

      # üìä Upload Allure results
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results/
          if-no-files-found: warn

      # üß± Generate Allure HTML report
      - name: Generate Allure report
        if: always()
        run: |
          npx allure generate reports/allure-results --clean -o reports/allure-report || true
          if [ ! -f reports/allure-report/index.html ]; then
            mkdir -p reports/allure-report
            echo "<html><body><h1>Test Run Failed</h1><p>Check job logs for details.</p></body></html>" > reports/allure-report/index.html
          fi

      - name: Upload Allure HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: reports/allure-report/
          if-no-files-found: warn
