name: CI - Realworld App (Backend + WDIO Tests)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: realworld
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # üß† BACKEND
      - name: Install backend dependencies
        run: |
          cd realworld-backend-main
          npm ci
          npx prisma generate
          npx prisma migrate deploy

      - name: Start backend server
        run: |
          cd realworld-backend-main
          npm start &
          echo "Waiting for API to be ready..."
          n=0
          until [ $n -ge 20 ]; do
            if curl -s http://localhost:3001/api/tags > /dev/null; then
              echo "‚úÖ API is up!"
              break
            fi
            n=$((n+1))
            echo "‚è≥ Waiting for API... ($n/20)"
            sleep 3
          done
          if [ $n -ge 20 ]; then
            echo "‚ùå API failed to start"
            exit 1
          fi

      # üß© FRONTEND (optional)
      - name: Install frontend dependencies
        run: |
          cd realworld-ui-main
          npm ci
          npm run build

      # üß™ WDIO TESTS (your script)
      - name: Run tests (spec + BDD)
        run: |
          cd wdio-project-main
          npm ci
          npm run test:all
        env:
          CI: true
          API_URL: http://localhost:3001/api

      # üìä ALLURE REPORT
      - name: Upload Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: wdio-project-main/reports/allure-results/
          if-no-files-found: warn

      - name: Generate Allure report
        if: always()
        run: |
          cd wdio-project-main
          npx allure generate reports/allure-results --clean -o reports/allure-report || true
          if [ ! -f reports/allure-report/index.html ]; then
            mkdi
